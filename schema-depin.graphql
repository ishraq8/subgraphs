# Subgraph Schema: DePin
# Version: 2.0.0
# See https://github.com/messari/subgraphs/blob/master/docs/SCHEMA.md for details

enum Network {
  ARBITRUM_ONE
  ARWEAVE_MAINNET
  AURORA
  AVALANCHE
  BOBA
  BSC # aka BNB Chain
  CELO
  COSMOS
  CRONOS
  MAINNET # Ethereum Mainnet
  FANTOM
  FUSE
  HARMONY
  JUNO
  MOONBEAM
  MOONRIVER
  NEAR_MAINNET
  OPTIMISM
  OSMOSIS
  MATIC # aka Polygon
  GNOSIS
}

enum ProtocolType {
  EXCHANGE
  LENDING
  YIELD
  BRIDGE
  GENERIC
  # Will add more
}

enum TokenType {
  MULTIPLE
  UNKNOWN
  ERC20
  ERC721
  ERC1155
  BEP20
  BEP721
  BEP1155
  # Will add more
}

type Token @entity {
  " Smart contract address of the token "
  id: Bytes!

  " Name of the token, mirrored from the smart contract "
  name: String!

  " Symbol of the token, mirrored from the smart contract "
  symbol: String!

  " The number of decimal places this token uses, default to 18 "
  decimals: Int!

  " Optional field to track the price of a token, mostly for caching purposes "
  lastPriceUSD: BigDecimal

  " Optional field to track the block number of the last token price "
  lastPriceBlockNumber: BigInt
}

enum RewardTokenType {
  " For reward tokens awarded to LPs/lenders "
  DEPOSIT

  " For reward tokens awarded to borrowers "
  BORROW
}

type RewardToken @entity {
  " { Reward token type }-{ Smart contract address of the reward token } "
  id: Bytes!

  " Reference to the actual token "
  token: Token!

  " The type of the reward token "
  type: RewardTokenType!
}

#############################
##### Protocol Metadata #####
#############################

type Protocol @entity {
  " Smart contract address of the protocol's main contract (Factory, Registry, etc) "
  id: Bytes!

  " Name of the protocol, including version. e.g. Uniswap v3 "
  name: String!

  " Slug of protocol, including version. e.g. uniswap-v3 "
  slug: String!

  " Version of the subgraph schema, in SemVer format (e.g. 1.0.0) "
  schemaVersion: String!

  " Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) "
  subgraphVersion: String!

  " Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) "
  methodologyVersion: String!

  " The blockchain network this subgraph is indexing on "
  network: Network!

  " The type of protocol (e.g. DEX, Lending, Yield, etc) "
  type: ProtocolType!

  ##### Quantitative Data #####

 " Current TVL (Total Value Locked) of the entire protocol "
  totalValueLockedUSD: BigDecimal!

  " Current TVS (Total Value Staked) of Nodes "
  totalValueStakedNodesUSD: BigDecimal!

  " Current TS (Total Staked) of Nodes "
  totalStakedNodesToken: BigDecimal!

  " Current TVS (Total Value Staked) of Delegators "
  totalValueStakedDelegatorsUSD: BigDecimal!

  " Current TS (Total Staked) of Delegators "
  totalStakedDelegatorsToken: BigDecimal!

  " Current TB (Total Balance) of Helpers, This is a generalized term, they could be staking or bonding, they could be curator bonding to subgraphs or transcoders"
  totalHelpersBalanceUSD: BigDecimal

  " Current TB (Total Balance) of Helpers, could be curator bonding to subgraphs or transcoders, in native token"
  totalHelpersTokenBalance: BigDecimal

  " Revenue claimed by suppliers to the protocol. Supply side can be subdivided into nodes, delegators and helpers "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " Token Revenue claimed by suppliers to the protocol. Supply side can be subdivided into nodes, delegators and helpers "
  cumulativeSupplySideRevenueToken: BigDecimal!

  " Revenue claimed by Nodes "
  cumulativeNodesRevenueUSD: BigDecimal!

  " Revenue claimed by Nodes, in token "
  cumulativeDelegatorsRevenueToken: BigDecimal!

  " Revenue claimed by Delegators "
  cumulativeDelegatorsRevenueUSD: BigDecimal!

  " Revenue claimed by Delegators, in token "
  cumulativeDelegatorsRevenueToken: BigDecimal!

  " Revenue claimed by Helpers "
  cumulativeHelpersRevenueUSD: BigDecimal

  " Revenue claimed by Helpers, in token "
  cumulativeHelpersRevenueToken: BigDecimal

  " Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushiâ€™s 0.05%). OpenSea 10% sell fee. "
  cumulativeProtocolSideRevenueUSD: BigDecimal

  " All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. "
  cumulativeTotalRevenueUSD: BigDecimal!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Number of cumulative unique Nodes "
  cumulativeUniqueNodes: Int!

  " Number of cumulative unique delegators "
  cumulativeUniqueDelegators: Int!

  " Number of cumulative unique subgraphs (graph) or transcoders (livepeer), a third `helper` option in addition to nodes and delegators"
  cumulativeUniqueHelpers: Int

  " Total number of pools "
  totalPoolCount: Int!

  " Day ID of the most recent daily snapshot "
  lastSnapshotDayID: Int!

  " Hour ID of the most recent hourly snapshot "
  lastSnapshotHourID: Int!

  " Timestamp of the last time this entity was updated "
  lastUpdateTimestamp: BigInt!

  ##### Snapshots #####

  " Daily usage metrics for this protocol "
  dailyUsageMetrics: [UsageMetricsDailySnapshot!]!
    @derivedFrom(field: "protocol")

  " Hourly usage metrics for this protocol "
  hourlyUsageMetrics: [UsageMetricsHourlySnapshot!]!
    @derivedFrom(field: "protocol")

  " Daily financial metrics for this protocol "
  financialMetrics: [FinancialsDailySnapshot!]! @derivedFrom(field: "protocol")

  ##### Pools #####

  " All pools that belong to this protocol "
  pools: [Pool!]! @derivedFrom(field: "protocol")
}

###############################
##### Protocol Timeseries #####
###############################

type UsageMetricsDailySnapshot @entity {
  " ID is # of days since Unix epoch time "
  id: Bytes!

  " Number of days since Unix epoch time "
  day: Int!

  " Protocol this snapshot is associated with "
  protocol: Protocol!

  " Number of unique daily active users "
  dailyActiveUsers: Int!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Number of unique nodes that are staked, this is more of a cumulative perimeter"
  openNodes: Int!

  " Number of nodes that are open with some activity on them "
  dailyActiveNodes: Int

  " Number of cumulative unique Nodes "
  cumulativeUniqueNodes: Int!

  " Number of unique delegators that are staked, this is more of a cumulative perimeter"
  openDelegators: Int!

  " Number of unique daily active Delegators, that part of a node that does a job on a daily basis, this metric is optional "
  dailyActiveDelegators: Int

  " Number of cumulative unique delegators "
  cumulativeUniqueDelegators: Int!

  " Number of unique helpers that have a balance, this is more of a cumulative perimeter"
  openHelpers: Int

  " Number of unique daily active Helpers, that do a job on a daily basis "
  dailyActiveHelpers: Int

   " Number of cumulative unique subgraphs (graph) or transcoders (livepeer), a third `helper` option in addition to nodes and delegators"
  cumulativeUniqueHelpers: Int

  " Total number of transactions occurred in a day. Transactions include all entities that implement the Event interface. "
  dailyTransactionCount: Int!

  " Total number of pools "
  totalPoolCount: Int!

  " Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) "
  timestamp: BigInt!

  " Block number of when this snapshot was taken/last modified (May be taken after interval has passed) "
  blockNumber: BigInt!
}

type UsageMetricsHourlySnapshot @entity {
  " { # of hours since Unix epoch time } "
  id: Bytes!

  " Number of hours since Unix epoch time "
  hour: Int!

  " Protocol this snapshot is associated with "
  protocol: Protocol!

  " Number of unique hourly active users "
  hourlyActiveUsers: Int!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Number of unique daily active Nodes, that do a job on a daily basis "
  hourlyActiveNodes: Int!

  " Number of unique nodes that are staked, this is more of a cumulative perimeter"
  openNodes: Int!

  " Number of cumulative unique Nodes "
  cumulativeUniqueNodes: Int!

  " Number of unique daily active Delegators, that do a job on a daily basis "
  hourlyActiveDelegators: Int!

  " Number of unique delegators that are staked, this is more of a cumulative perimeter"
  openDelegators: Int!

  " Number of cumulative unique delegators "
  cumulativeUniqueDelegators: Int!

  " Number of unique daily active Helpers, that do a job on a daily basis "
  hourlyActiveHelpers: Int!

  " Number of unique helpers that have a balance, this is more of a cumulative perimeter"
  openHelpers: Int

  " Number of cumulative unique subgraphs (graph) or transcoders (livepeer), a third `helper` option in addition to nodes and delegators"
  cumulativeUniqueHelpers: Int

  " Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface. "
  hourlyTransactionCount: Int!

  " Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) "
  timestamp: BigInt!

  " Block number of when this snapshot was taken/last modified (May be taken after interval has passed) "
  blockNumber: BigInt!
}

type FinancialsDailySnapshot @entity {
  " ID is # of days since Unix epoch time "
  id: Bytes!

  " Number of days since Unix epoch time "
  day: Int!

  " Protocol this snapshot is associated with "
  protocol: Protocol!

  " Current TVL (Total Value Locked) of the entire protocol "
  totalValueLockedUSD: BigDecimal!

  " Current TVL (Total Value locked) of the entire protocol in native token "
  totalValueLockedToken: BigDecimal!

  " Current TVS (Total Value Staked) of Nodes "
  totalValueStakedNodesUSD: BigDecimal!

  " Current TS (Total Staked) of Nodes "
  totalStakedNodesToken: BigDecimal!

  " Current TVS (Total Value Staked) of Delegators "
  totalValueStakedDelegatorsUSD: BigDecimal!

  " Current TS (Total Staked) of Delegators "
  totalStakedDelegatorsToken: BigDecimal!

  " Current TB (Total Balance) of Helpers, This is a generalized term, they could be staking or bonding, they could be curator bonding to subgraphs or transcoders"
  totalHelpersBalanceUSD: BigDecimal

  " Current TB (Total Balance) of Helpers, could be curator bonding to subgraphs or transcoders, in native token"
  totalHelpersTokenBalance: BigDecimal

  " Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  dailySupplySideRevenueUSD: BigDecimal!

  " Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushiâ€™s 0.05%). OpenSea 10% sell fee. "
  dailyProtocolSideRevenueUSD: BigDecimal!

  " Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushiâ€™s 0.05%). OpenSea 10% sell fee. "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. "
  dailyTotalRevenueUSD: BigDecimal!

  " All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. "
  cumulativeTotalRevenueUSD: BigDecimal!

  " Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) "
  timestamp: BigInt!

  " Block number of when this snapshot was taken/last modified (May be taken after interval has passed) "
  blockNumber: BigInt!
}

###########################
##### Node-Level Data #####
###########################

type Node @entity {
  " Smart contract address of the Node "
  id: Bytes!

  " The protocol this pool belongs to "
  protocol: Protocol!

  " Name of the Node "
  name: String

 " Geographic location of node "
  location: String
}

# An account is a unique Ethereum address
# Helps to accumulate total unique users
type Account @entity {
  " Address of the account "
  id: ID!
}

# Helper entity for calculating daily/hourly active users
type ActiveAccount @entity {
  " { daily/hourly }-{ Address of the account }-{ Days/hours since Unix epoch } "
  id: ID!
}

type _ActivityHelper @entity {
  id: Bytes!

  hourlyActiveUsers: Int!
  dailyActiveUsers: Int!
}

# Helper entity for calculating reward emissions
type _CircularBuffer @entity {
  " 'CIRCULAR_BUFFER' "
  id: ID!

  " Array of sorted block numbers sorted continuously "
  blocks: [Int!]!

  " The index in the blocks array which will be used with the newest block to calculate block speed (Usally set to about a day before newest block) "
  windowStartIndex: Int!

  " The next index in the blocks array that will be replaced with the newest block "
  nextIndex: Int!

  " This determines the size of the blocks array. Should be set to contain at least a days worth of blocks according to a 1 day window for measuring speed"
  bufferSize: Int!

  " The current calculated number of blocks per day based on calculated block speed "
  blocksPerDay: BigDecimal!
}
